name: Apply all security recommendations using Ansible Job Template
on:
  workflow_dispatch:
  push:
    branches:
      - main
      - test
jobs:
  build:
    name: Ansible Lint # Naming the build is important to use it as a status check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run ansible-lint
        uses: ansible/ansible-lint@v6.22.2 # or version tag instead of 'main
        with:
          args: --profile min .

  testAnsiblePolicies:
    runs-on: ubuntu-latest
    steps:
      - name: Trigger compliance Job on Automation Controller
        run: |
          ANSIBLE_CONTROLLER_URL="https://electric-hermit-remarkably.ngrok-free.app"
          RESPONSE=$(curl -X POST -s -k \
          -H "Authorization: Bearer ${{ secrets.ANSIBLE_TOKEN }}" \
          -A "nonstandardUA" \
          "$ANSIBLE_CONTROLLER_URL/api/v2/job_templates/Autocompliance++Default/launch/")
          JOB_ID=$(echo $RESPONSE | jq -r '.job')
          echo "JOB_ID=$JOB_ID" >> $GITHUB_ENV
          echo "ANSIBLE_CONTROLLER_URL=$ANSIBLE_CONTROLLER_URL" >> $GITHUB_ENV
          echo El job id es $JOB_ID

      - name: Evaluate job running until completion and report failed hosts if any
        run: |
          JOB_STATUS="new"
          while [[ "$JOB_STATUS" == "new" || "$JOB_STATUS" == "pending" || "$JOB_STATUS" == "running" ]]; do
            sleep 10  # Poll every 30 seconds; adjust as necessary
            RESPONSE=$(curl -s -k -A "nonstandardUA" -X GET "$ANSIBLE_CONTROLLER_URL/api/v2/jobs/$JOB_ID/" -H "Authorization: Bearer ${{ secrets.ANSIBLE_TOKEN }}")
            JOB_STATUS=$(echo $RESPONSE | jq -r '.status')
            echo "Job status: $JOB_STATUS"
          done
          if [[ "$JOB_STATUS" == "successful" ]]; then
            echo "Job completed successfully."
            exit 0
          else
            echo "Job failed with status $JOB_STATUS."
            ################ if job failed overall, report PLAY RECAP section
            # Get job stdout
            RESPONSE=$(curl -s -k -A "nonstandardUA" -X GET "$ANSIBLE_CONTROLLER_URL/api/v2/jobs/$JOB_ID/stdout/?format=txt" -H "Authorization: Bearer ${{ secrets.ANSIBLE_TOKEN }}")
            # Print host summary from STDOUT
            echo "Please examine failed hosts manually:"
            echo "$RESPONSE" | awk '/PLAY RECAP/{flag=1} flag' | grep -E '(failed=[1-9])|(unreachable=[1-9])'
            echo "====================================="
            exit 1
          fi
